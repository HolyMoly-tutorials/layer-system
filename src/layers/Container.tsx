import { Slot } from "@radix-ui/react-slot";
import { ReactNode } from "react";
import { styled } from "../../styled-system/jsx";

// TODO: size prop 추가할 수 있는지 디자이너와 협의 필요
// TODO: height 규격화할 수 있는지 디자이너와 협의 필요

const StyledContainer = (asChild: boolean) =>
	styled(asChild ? Slot : "div", {
		base: {
			position: "relative",
			overflow: "hidden",
		},
		variants: {
			backgroundColor: {
				transparent: { backgroundColor: "var(--transparent)" },
				gray000: { backgroundColor: "var(--gray-000)" },
				gray100: { backgroundColor: "var(--gray-100)" },
				gray200: { backgroundColor: "var(--gray-200)" },
				gray300: { backgroundColor: "var(--gray-300)" },
				gray400: { backgroundColor: "var(--gray-400)" },
				gray500: { backgroundColor: "var(--gray-500)" },
				gray600: { backgroundColor: "var(--gray-600)" },
				gray700: { backgroundColor: "var(--gray-700)" },
				gray800: { backgroundColor: "var(--gray-800)" },
				gray900: { backgroundColor: "var(--gray-900)" },
				gray950: { backgroundColor: "var(--gray-950)" },
				primary: { backgroundColor: "var(--primary)" },
				secondary: { backgroundColor: "var(--secondary)" },
				success: { backgroundColor: "var(--success)" },
				warning: { backgroundColor: "var(--warning)" },
				danger: { backgroundColor: "var(--danger)" },
				hint: { backgroundColor: "var(--hint)" },
				contrast: { backgroundColor: "var(--contrast)" },
			},
			border: {
				none: { border: "none" },
				gray000: { border: "1px solid var(--gray-000)" },
				gray100: { border: "1px solid var(--gray-100)" },
				gray200: { border: "1px solid var(--gray-200)" },
				gray300: { border: "1px solid var(--gray-300)" },
				gray400: { border: "1px solid var(--gray-400)" },
				gray500: { border: "1px solid var(--gray-500)" },
				gray600: { border: "1px solid var(--gray-600)" },
				gray700: { border: "1px solid var(--gray-700)" },
				gray800: { border: "1px solid var(--gray-800)" },
				gray900: { border: "1px solid var(--gray-900)" },
				gray950: { border: "1px solid var(--gray-950)" },
				primary: { border: "1px solid var(--primary)" },
				secondary: { border: "1px solid var(--secondary)" },
				success: { border: "1px solid var(--success)" },
				warning: { border: "1px solid var(--warning)" },
				danger: { border: "1px solid var(--danger)" },
				hint: { border: "1px solid var(--hint)" },
				contrast: { border: "1px solid var(--contrast)" },
			},
			borderBottom: {
				none: { borderBottom: "none" },
				gray000: { borderBottom: "1px solid var(--gray-000)" },
				gray100: { borderBottom: "1px solid var(--gray-100)" },
				gray200: { borderBottom: "1px solid var(--gray-200)" },
				gray300: { borderBottom: "1px solid var(--gray-300)" },
				gray400: { borderBottom: "1px solid var(--gray-400)" },
				gray500: { borderBottom: "1px solid var(--gray-500)" },
				gray600: { borderBottom: "1px solid var(--gray-600)" },
				gray700: { borderBottom: "1px solid var(--gray-700)" },
				gray800: { borderBottom: "1px solid var(--gray-800)" },
				gray900: { borderBottom: "1px solid var(--gray-900)" },
				gray950: { borderBottom: "1px solid var(--gray-950)" },
				primary: { borderBottom: "1px solid var(--primary)" },
				secondary: { borderBottom: "1px solid var(--secondary)" },
				success: { borderBottom: "1px solid var(--success)" },
				warning: { borderBottom: "1px solid var(--warning)" },
				danger: { borderBottom: "1px solid var(--danger)" },
				hint: { borderBottom: "1px solid var(--hint)" },
				contrast: { borderBottom: "1px solid var(--contrast)" },
			},
			borderTop: {
				none: { borderTop: "none" },
				gray000: { borderTop: "1px solid var(--gray-000)" },
				gray100: { borderTop: "1px solid var(--gray-100)" },
				gray200: { borderTop: "1px solid var(--gray-200)" },
				gray300: { borderTop: "1px solid var(--gray-300)" },
				gray400: { borderTop: "1px solid var(--gray-400)" },
				gray500: { borderTop: "1px solid var(--gray-500)" },
				gray600: { borderTop: "1px solid var(--gray-600)" },
				gray700: { borderTop: "1px solid var(--gray-700)" },
				gray800: { borderTop: "1px solid var(--gray-800)" },
				gray900: { borderTop: "1px solid var(--gray-900)" },
				gray950: { borderTop: "1px solid var(--gray-950)" },
				primary: { borderTop: "1px solid var(--primary)" },
				secondary: { borderTop: "1px solid var(--secondary)" },
				success: { borderTop: "1px solid var(--success)" },
				warning: { borderTop: "1px solid var(--warning)" },
				danger: { borderTop: "1px solid var(--danger)" },
				hint: { borderTop: "1px solid var(--hint)" },
				contrast: { borderTop: "1px solid var(--contrast)" },
			},
			borderLeft: {
				none: { borderLeft: "none" },
				gray000: { borderLeft: "1px solid var(--gray-000)" },
				gray100: { borderLeft: "1px solid var(--gray-100)" },
				gray200: { borderLeft: "1px solid var(--gray-200)" },
				gray300: { borderLeft: "1px solid var(--gray-300)" },
				gray400: { borderLeft: "1px solid var(--gray-400)" },
				gray500: { borderLeft: "1px solid var(--gray-500)" },
				gray600: { borderLeft: "1px solid var(--gray-600)" },
				gray700: { borderLeft: "1px solid var(--gray-700)" },
				gray800: { borderLeft: "1px solid var(--gray-800)" },
				gray900: { borderLeft: "1px solid var(--gray-900)" },
				gray950: { borderLeft: "1px solid var(--gray-950)" },
				primary: { borderLeft: "1px solid var(--primary)" },
				secondary: { borderLeft: "1px solid var(--secondary)" },
				success: { borderLeft: "1px solid var(--success)" },
				warning: { borderLeft: "1px solid var(--warning)" },
				danger: { borderLeft: "1px solid var(--danger)" },
				hint: { borderLeft: "1px solid var(--hint)" },
				contrast: { borderLeft: "1px solid var(--contrast)" },
			},
			borderRight: {
				none: { borderRight: "none" },
				gray000: { borderRight: "1px solid var(--gray-000)" },
				gray100: { borderRight: "1px solid var(--gray-100)" },
				gray200: { borderRight: "1px solid var(--gray-200)" },
				gray300: { borderRight: "1px solid var(--gray-300)" },
				gray400: { borderRight: "1px solid var(--gray-400)" },
				gray500: { borderRight: "1px solid var(--gray-500)" },
				gray600: { borderRight: "1px solid var(--gray-600)" },
				gray700: { borderRight: "1px solid var(--gray-700)" },
				gray800: { borderRight: "1px solid var(--gray-800)" },
				gray900: { borderRight: "1px solid var(--gray-900)" },
				gray950: { borderRight: "1px solid var(--gray-950)" },
				primary: { borderRight: "1px solid var(--primary)" },
				secondary: { borderRight: "1px solid var(--secondary)" },
				success: { borderRight: "1px solid var(--success)" },
				warning: { borderRight: "1px solid var(--warning)" },
				danger: { borderRight: "1px solid var(--danger)" },
				hint: { borderRight: "1px solid var(--hint)" },
				contrast: { borderRight: "1px solid var(--contrast)" },
			},
			borderRadius: {
				0: { borderRadius: "var(--border-radius-000)" },
				50: { borderRadius: "var(--border-radius-050)" },
				100: { borderRadius: "var(--border-radius-100)" },
				200: { borderRadius: "var(--border-radius-200)" },
				300: { borderRadius: "var(--border-radius-300)" },
				400: { borderRadius: "var(--border-radius-400)" },
				500: { borderRadius: "var(--border-radius-500)" },
				600: { borderRadius: "var(--border-radius-600)" },
				700: { borderRadius: "var(--border-radius-700)" },
				800: { borderRadius: "var(--border-radius-800)" },
				900: { borderRadius: "var(--border-radius-900)" },
				950: { borderRadius: "var(--border-radius-950)" },
			},
			height: {
				auto: { height: "auto" },
				25: { height: "var(--dimension-25)" },
				50: { height: "var(--dimension-50)" },
				75: { height: "var(--dimension-75)" },
				100: { height: "var(--dimension-100)" },
				150: { height: "var(--dimension-150)" },
				175: { height: "var(--dimension-175)" },
				200: { height: "var(--dimension-200)" },
				225: { height: "var(--dimension-225)" },
				250: { height: "var(--dimension-250)" },
				300: { height: "var(--dimension-300)" },
				400: { height: "var(--dimension-400)" },
				500: { height: "var(--dimension-500)" },
				600: { height: "var(--dimension-600)" },
				700: { height: "var(--dimension-700)" },
				800: { height: "var(--dimension-800)" },
			},
			width: {
				stretch: { width: "100%" },
				fit: { width: "auto", display: "inline-block" },
			},
			minWidth: {
				none: { minWidth: "none" },
				100: { minWidth: "100px" },
				200: { minWidth: "200px" },
				300: { minWidth: "300px" },
				400: { minWidth: "400px" },
				500: { minWidth: "500px" },
				600: { minWidth: "600px" },
				700: { minWidth: "700px" },
				// 필요한 경우 추가
			},
			minHeight: {
				none: { minHeight: "none" },
				100: { minHeight: "100px" },
				200: { minHeight: "200px" },
				300: { minHeight: "300px" },
				400: { minHeight: "400px" },
				500: { minHeight: "500px" },
				600: { minHeight: "600px" },
				700: { minHeight: "700px" },
				// 필요한 경우 추가
			},
		},
		defaultVariants: {
			backgroundColor: "transparent",
			border: "none",
			borderRadius: 300,
			height: "auto",
			width: "stretch",
			minWidth: "none",
			minHeight: "none",
		},
	});

export type StyledContainerProps = Omit<
	React.ComponentProps<ReturnType<typeof StyledContainer>>,
	"ref"
>;

export type ContainerProps = {
	asChild?: boolean;
	children: ReactNode;
	className?: string;
} & StyledContainerProps;

export const Container = ({
	asChild = false,
	children,
	...props
}: ContainerProps) => {
	const Component = StyledContainer(asChild);

	return <Component {...props}>{children}</Component>;
};
